from sys import argv
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings("ignore")

def plot_e0(fname):

    SIZE = 8

    with open(fname, "rb") as f:
        contents = f.read()

    results = {}

    test_count = int.from_bytes(contents[:8], 'little')

    for idx in range(8, len(contents), SIZE):

        real_idx = (idx - 8) // SIZE

        results[real_idx] = int.from_bytes(contents[idx: idx + SIZE], 'little', signed=True)
        #results[real_idx] /= test_count

    print(results)

    _, idx_to_res = plt.subplots(1)

    idx_to_res.set_title("Experiment 0")
    idx_to_res.plot(range((len(contents) - 8) // SIZE),
                    [fr for fr in results.values()])
    idx_to_res.grid(True)

    plt.show()

def plot_e1(fname):

    SIZE = 8

    with open(fname, "rb") as f:
        contents = f.read()

    results = {}

    test_count = int.from_bytes(contents[:8], 'little')

    for idx in range(8, len(contents), SIZE):

        real_idx = (idx - 8) // SIZE

        results[real_idx] = int.from_bytes(contents[idx: idx + SIZE], 'little', signed=True)
        #results[real_idx] /= test_count

    print(results)

    _, idx_to_res = plt.subplots(1)

    idx_to_res.set_title("Experiment 1")
    idx_to_res.plot(range((len(contents) - 8) // SIZE),
                    [fr for fr in results.values()])
    idx_to_res.grid(True)

    plt.show()

def plot_e2(fname):

    SIZE = 8

    with open(fname, "rb") as f:
        contents = f.read()

    results = {}

    test_count = int.from_bytes(contents[:8], 'little')

    for idx in range(8, len(contents), SIZE):

        real_idx = (idx - 8) // SIZE

        results[real_idx] = int.from_bytes(contents[idx: idx + SIZE], 'little', signed=True)
        #results[real_idx] /= test_count

    print(results)

    _, idx_to_res = plt.subplots(1)

    idx_to_res.set_title("Experiment 1")
    idx_to_res.plot(range((len(contents) - 8) // SIZE),
                    [fr for fr in results.values()])
    idx_to_res.grid(True)

    plt.show()

if __name__ == "__main__":

    assert(len(argv) >= 2)

    if argv[1] == "0":
        plot_e0("e0_stats.bin")

    elif argv[1] == "1":
        plot_e1("e1_stats.bin")

    elif argv[1] == "2":
        plot_e2("e2_stats.bin")